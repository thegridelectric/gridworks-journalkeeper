<?xml version="1.0"?>
<FileSet xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <FileSetId>4b713f03-1d9f-42f2-b02f-e3cdbd237bb3</FileSetId>
  <CreatedOn xsi:nil="true" />
  <FileSetFiles>
    <FileSetFile>
      <FileSetFileId>00000000-0000-0000-0000-000000000000</FileSetFileId>
      <FileSetId>00000000-0000-0000-0000-000000000000</FileSetId>
      <RelativePath>../../../../../docs/asls/json/gridworks-event-snapshot-spaceheat.json</RelativePath>
      <FileContents>{
  "gtr_asl": "001",
  "type_name": "gridworks.event.snapshot.spaceheat",
  "version": "000",
  "owner": "gridworks@gridworks-consulting.com",
  "description": ". This is a gwproto wrapper around a gt.sh.status message that includes the src (which should always be the GNodeAlias for the Scada actor), a unique message id (which is immutable once the gt.sh.status message is created, and does not change if the SCADA re-sends the message due to no ack from AtomicTNode) and a timestamp for when the message was created.",
  "properties": {
    "MessageId": {
      "type": "string",
      "format": "UuidCanonicalTextual",
      "title": "",
      "description": "This is a unique immutable id assigned to the snapshot payload when created by the SCADA. If the original message is not acked by the AtomicTNode, the entire gridworks.event is stored locally and re-sent later when AtomicTNode comms are re-established. (with this same MessageId)",
      "required": true
    },
    "TimeNS": {
      "type": "integer",
      "description": "The time in epoch nanoseconds that the SCADA created the snapshot.",
      "required": true
    },
    "Src": {
      "type": "string",
      "format": "LeftRightDot",
      "title": "",
      "description": "The GNodeAlias of the SCADA sending the snapshot.",
      "required": true
    },
    "Snap": {
      "type": "snapshot.spaceheat.000",
      "required": true
    },
    "TypeName": {
      "type": "string",
      "value": "gridworks.event.snapshot.spaceheat",
      "title": "The type name"
    },
    "Version": {
      "type": "string",
      "title": "The type version",
      "default": "000",
      "required": true
    }
  }
}
</FileContents>
      <AlwaysOverwrite>true</AlwaysOverwrite>
      <SkipClean>false</SkipClean>
    </FileSetFile>
    <FileSetFile>
      <FileSetFileId>00000000-0000-0000-0000-000000000000</FileSetFileId>
      <FileSetId>00000000-0000-0000-0000-000000000000</FileSetId>
      <RelativePath>../../../../../docs/asls/json/heartbeat-a.json</RelativePath>
      <FileContents>{
  "gtr_asl": "001",
  "type_name": "heartbeat.a",
  "version": "001",
  "owner": "gridworks@gridworks-consulting.com",
  "description": "Used to check that an actor can both send and receive messages. Payload for direct messages sent back and forth between actors, for example a Supervisor and one of its subordinates.",
  "url": "https://gridworks.readthedocs.io/en/latest/g-node-instance.html",
  "properties": {
    "TypeName": {
      "type": "string",
      "value": "heartbeat.a",
      "title": "The type name"
    },
    "Version": {
      "type": "string",
      "title": "The type version",
      "default": "001",
      "required": true
    }
  },
  "formats": {
    "HexChar": {
      "type": "string",
      "description": "single-char string in '0123456789abcdefABCDEF'",
      "example": "d"
    }
  }
}
</FileContents>
      <AlwaysOverwrite>false</AlwaysOverwrite>
      <SkipClean>false</SkipClean>
    </FileSetFile>
    <FileSetFile>
      <FileSetFileId>00000000-0000-0000-0000-000000000000</FileSetFileId>
      <FileSetId>00000000-0000-0000-0000-000000000000</FileSetId>
      <RelativePath>../../../../../docs/asls/json/gt-sh-simple-telemetry-status.json</RelativePath>
      <FileContents>{
  "gtr_asl": "001",
  "type_name": "gt.sh.simple.telemetry.status",
  "version": "100",
  "owner": "gridworks@gridworks-consulting.com",
  "description": "Data read from a SimpleSensor run by a SpaceHeat SCADA. A list of readings from a simple sensor for a Spaceheat SCADA. Designed as part of a status message sent from the SCADA to its AtomicTNode typically once every 5 minutes. The nth element of each of its two lists refer to the same reading (i.e. what the value is, when it was read).",
  "url": "https://gridworks-protocol.readthedocs.io/en/latest/simple-sensor.html",
  "properties": {
    "ShNodeAlias": {
      "type": "string",
      "format": "LeftRightDot",
      "title": "SpaceheatNodeAlias",
      "description": "The Alias of the SimpleSensor associated to the readings",
      "required": true
    },
    "TelemetryName": {
      "type": "string",
      "format": "spaceheat.telemetry.name",
      "title": "TelemetryName",
      "description": "The TelemetryName of the readings. This is used to interpet the meaning of the reading values. For example, WaterTempCTimes1000 means the reading is measuring the temperature of water, in Celsius multiplied by 1000. So a value of 37000 would be a reading of 37 deg C.",
      "required": true
    },
    "ValueList": {
      "type": "array",
      "items": {
        "type": "integer"
      },
      "description": "The values of the readings.",
      "required": true
    },
    "ReadTimeUnixMsList": {
      "type": "array",
      "items": {
        "type": "integer"
      },
      "format": "ReasonableUnixTimeMs",
      "title": "List of Read Times",
      "description": "The times that the SImpleSensor took the readings, in unix milliseconds",
      "required": true
    },
    "TypeName": {
      "type": "string",
      "value": "gt.sh.simple.telemetry.status",
      "title": "The type name"
    },
    "Version": {
      "type": "string",
      "title": "The type version",
      "default": "100",
      "required": true
    }
  },
  "axioms": {
    "Axiom1": {
      "title": "ListLengthConsistency",
      "description": "ValueList and ReadTimeUnixMsList must have the same length."
    }
  },
  "formats": {
    "LeftRightDot": {
      "type": "string",
      "description": "Lowercase alphanumeric words separated by periods, with the most significant word (on the left) starting with an alphabet character.",
      "example": "dw1.isone.me.freedom.apple"
    },
    "ReasonableUnixTimeMs": {
      "type": "string",
      "description": "An integer reflecting unix time in MILLISECONDS between midnight Jan 1 2000 and midnight Jan 1 3000 UTC",
      "example": "1702327940710"
    }
  }
}
</FileContents>
      <AlwaysOverwrite>false</AlwaysOverwrite>
      <SkipClean>false</SkipClean>
    </FileSetFile>
    <FileSetFile>
      <FileSetFileId>00000000-0000-0000-0000-000000000000</FileSetFileId>
      <FileSetId>00000000-0000-0000-0000-000000000000</FileSetId>
      <RelativePath>../../../../../docs/asls/json/data-channel-gt.json</RelativePath>
      <FileContents>{
  "gtr_asl": "001",
  "type_name": "data.channel.gt",
  "version": "000",
  "owner": "gridworks@gridworks-consulting.com",
  "description": "Data Channel. A data channel is a concept of some collection of readings that share all characteristics other than time.",
  "properties": {
    "Name": {
      "type": "string",
      "format": "SpaceheatName",
      "title": "Name",
      "description": "The Channel Name is meant to be the local unique identifier for the channel within the context of a specific TerminalAsset. In addition to local uniqueness, it is immutable. It is designed to be the key that time series data is sorted by in analysis, as well as a useful way of referencing a channel within Scada code.",
      "required": true
    },
    "DisplayName": {
      "type": "string",
      "description": "This display name is the handle for the data channel. It is meant to be set by the person/people who will be analyzing time series data. It is only expected to be unique within the data channels associated to a specific Terminal Asset. Mutable.",
      "required": true
    },
    "AboutNodeName": {
      "type": "string",
      "format": "SpaceheatName",
      "title": "About Name",
      "description": "The name of the SpaceheatNode whose physical quantities are getting captured.",
      "required": true
    },
    "CapturedByNodeName": {
      "type": "string",
      "format": "SpaceheatName",
      "title": "Captured By Name",
      "description": "The name of the SpaceheatNode that is capturing the physical quantities (which can be AboutName but does not have to be).",
      "required": true
    },
    "TelemetryName": {
      "type": "string",
      "format": "spaceheat.telemetry.name",
      "title": "Telemetry Name",
      "description": "The name of the physical quantity getting measured.",
      "required": true
    },
    "Id": {
      "type": "string",
      "format": "UuidCanonicalTextual",
      "title": "Id",
      "description": "Meant to be an immutable identifier that is globally unique (i.e., across terminal assets).",
      "required": true
    },
    "TypeName": {
      "type": "string",
      "value": "data.channel.gt",
      "title": "The type name"
    },
    "Version": {
      "type": "string",
      "title": "The type version",
      "default": "000",
      "required": true
    }
  },
  "formats": {
    "UuidCanonicalTextual": {
      "type": "string",
      "description": "A string of hex words separated by hyphens of length 8-4-4-4-12.",
      "example": "652ba6b0-c3bf-4f06-8a80-6b9832d60a25"
    },
    "SpaceheatName": {
      "type": "string",
      "description": "Lowercase words separated by periods, where the word characters can be alphanumeric or a hyphen and the first word starts with an alphabet character.",
      "example": "store-hot-pipe"
    }
  }
}
</FileContents>
      <AlwaysOverwrite>false</AlwaysOverwrite>
      <SkipClean>false</SkipClean>
    </FileSetFile>
    <FileSetFile>
      <FileSetFileId>00000000-0000-0000-0000-000000000000</FileSetFileId>
      <FileSetId>00000000-0000-0000-0000-000000000000</FileSetId>
      <RelativePath>../../../../../docs/asls/json/gt-sh-booleanactuator-cmd-status.json</RelativePath>
      <FileContents>{
  "gtr_asl": "001",
  "type_name": "gt.sh.booleanactuator.cmd.status",
  "version": "101",
  "owner": "gridworks@gridworks-consulting.com",
  "description": "Boolean  Actuator Driver Command Status Package. This is a subtype of the status message sent from a SCADA to its AtomicTNode. It contains a list of all the commands that a particular boolean actuator actor has reported as sending as actuation commands to its driver in the last transmission period (typically 5 minutes).",
  "url": "https://gridworks.readthedocs.io/en/latest/relay-state.html",
  "properties": {
    "ShNodeName": {
      "type": "string",
      "format": "LeftRightDot",
      "title": "SpaceheatNodeAlias",
      "description": "The alias of the spaceheat node that is getting actuated. For example, `a.elt1.relay` would likely indicate the relay for a resistive element.",
      "required": true
    },
    "RelayStateCommandList": {
      "type": "array",
      "items": {
        "type": "integer"
      },
      "description": "This is only intended for use for relays where the two states are either closing a circuit so that power is on ( '1') or opening it ('0').",
      "required": true
    },
    "CommandTimeUnixMsList": {
      "type": "array",
      "items": {
        "type": "integer"
      },
      "format": "ReasonableUnixTimeMs",
      "title": "List of Command Times",
      "required": true
    },
    "TypeName": {
      "type": "string",
      "value": "gt.sh.booleanactuator.cmd.status",
      "title": "The type name"
    },
    "Version": {
      "type": "string",
      "title": "The type version",
      "default": "101",
      "required": true
    }
  },
  "axioms": {
    "Axiom": {
      "title": "RelayStateCommandLIst must be all 0s and 1s.",
      "description": ""
    }
  },
  "formats": {
    "SpaceheatName": {
      "type": "string",
      "description": "Lowercase words separated by periods, where the word characters can be alphanumeric or a hyphen and the first word starts with an alphabet character.",
      "example": "store-hot-pipe"
    },
    "ReasonableUnixTimeMs": {
      "type": "string",
      "description": "An integer reflecting unix time in MILLISECONDS between midnight Jan 1 2000 and midnight Jan 1 3000 UTC",
      "example": "1702327940710"
    }
  }
}
</FileContents>
      <AlwaysOverwrite>false</AlwaysOverwrite>
      <SkipClean>false</SkipClean>
    </FileSetFile>
    <FileSetFile>
      <FileSetFileId>00000000-0000-0000-0000-000000000000</FileSetFileId>
      <FileSetId>00000000-0000-0000-0000-000000000000</FileSetId>
      <RelativePath>../../../../../docs/asls/json/gridworks-event-gt-sh-status.json</RelativePath>
      <FileContents>{
  "gtr_asl": "001",
  "type_name": "gridworks.event.gt.sh.status",
  "version": "000",
  "owner": "gridworks@gridworks-consulting.com",
  "description": ". This is a gwproto wrapper around a gt.sh.status message that includes the src (which should always be the GNodeAlias for the Scada actor), a unique message id (which is immutable once the gt.sh.status message is created, and does not change if the SCADA re-sends the message due to no ack from AtomicTNode) and a timestamp for when the message was created.",
  "properties": {
    "MessageId": {
      "type": "string",
      "format": "UuidCanonicalTextual",
      "title": "MessageId",
      "description": "This is a unique immutable id assigned to the status payload when created by the SCADA. If the original message is not acked by the AtomicTNode, the entire gridworks.event is stored locally and re-sent later when AtomicTNode comms are re-established. (with this same MessageId)",
      "required": true
    },
    "TimeNS": {
      "type": "integer",
      "description": "The time in epoch nanoseconds that the SCADA created the status.",
      "required": true
    },
    "Src": {
      "type": "string",
      "format": "LeftRightDot",
      "title": "",
      "description": "The GNodeAlias of the SCADA sending the status.",
      "required": true
    },
    "Status": {
      "type": "gt.sh.status.110",
      "required": true
    },
    "TypeName": {
      "type": "string",
      "value": "gridworks.event.gt.sh.status",
      "title": "The type name"
    },
    "Version": {
      "type": "string",
      "title": "The type version",
      "default": "000",
      "required": true
    }
  },
  "formats": {
    "UuidCanonicalTextual": {
      "type": "string",
      "description": "A string of hex words separated by hyphens of length 8-4-4-4-12.",
      "example": "652ba6b0-c3bf-4f06-8a80-6b9832d60a25"
    },
    "LeftRightDot": {
      "type": "string",
      "description": "Lowercase alphanumeric words separated by periods, with the most significant word (on the left) starting with an alphabet character.",
      "example": "dw1.isone.me.freedom.apple"
    }
  }
}
</FileContents>
      <AlwaysOverwrite>true</AlwaysOverwrite>
      <SkipClean>false</SkipClean>
    </FileSetFile>
    <FileSetFile>
      <FileSetFileId>00000000-0000-0000-0000-000000000000</FileSetFileId>
      <FileSetId>00000000-0000-0000-0000-000000000000</FileSetId>
      <RelativePath>../../../../../docs/asls/json/channel-readings.json</RelativePath>
      <FileContents>{
  "gtr_asl": "001",
  "type_name": "channel.readings",
  "version": "000",
  "owner": "gridworks@gridworks-consulting.com",
  "description": ". A list of timestamped readings (values) for a data channel. This is meant to be reported for non-local consumption (AtomicTNode, other) by a SCADA. Therefore, the data channel is referenced by its globally unique identifier. The receiver needs to reference this idea against a list of the data channels used by the SCADA for accurate parsing.",
  "properties": {
    "ChannelId": {
      "type": "string",
      "format": "UuidCanonicalTextual",
      "title": "Channel Od",
      "description": "The globally unique identifier of the Data Channel for this batch of timestamped values.",
      "required": true
    },
    "ValueList": {
      "type": "array",
      "items": {
        "type": "integer"
      },
      "description": "Refer to the associated DataChannel to understand the meaning of the these readings.",
      "required": true
    },
    "ScadaReadTimeUnixMsList": {
      "type": "array",
      "items": {
        "type": "integer"
      },
      "format": "ReasonableUnixTimeMs",
      "title": "List of Read Times",
      "description": "The times that the MultipurposeSensor took the readings, in unix milliseconds",
      "required": true
    },
    "TypeName": {
      "type": "string",
      "value": "channel.readings",
      "title": "The type name"
    },
    "Version": {
      "type": "string",
      "title": "The type version",
      "default": "000",
      "required": true
    }
  },
  "axioms": {
    "Axiom1": {
      "title": "ListLengthConsistency",
      "description": "ValueList and ScadaReadTimeUnixMsList must have the same length."
    }
  },
  "formats": {
    "UuidCanonicalTextual": {
      "type": "string",
      "description": "A string of hex words separated by hyphens of length 8-4-4-4-12.",
      "example": "652ba6b0-c3bf-4f06-8a80-6b9832d60a25"
    },
    "ReasonableUnixTimeMs": {
      "type": "string",
      "description": "An integer reflecting unix time in MILLISECONDS between midnight Jan 1 2000 and midnight Jan 1 3000 UTC",
      "example": "1702327940710"
    }
  }
}
</FileContents>
      <AlwaysOverwrite>false</AlwaysOverwrite>
      <SkipClean>false</SkipClean>
    </FileSetFile>
    <FileSetFile>
      <FileSetFileId>00000000-0000-0000-0000-000000000000</FileSetFileId>
      <FileSetId>00000000-0000-0000-0000-000000000000</FileSetId>
      <RelativePath>../../../../../docs/asls/json/fsm-full-report.json</RelativePath>
      <FileContents>{
  "gtr_asl": "001",
  "type_name": "fsm.full.report",
  "version": "000",
  "owner": "gridworks@gridworks-consulting.com",
  "description": ". There will be cascading events, actions and transitions that will naturally follow a single high-level event. This message is designed to encapsulate all of those.",
  "url": "https://gridworks-protocol.readthedocs.io/en/latest/finite-state-machines.html",
  "properties": {
    "FromName": {
      "type": "string",
      "format": "SpaceheatName",
      "title": "From Name",
      "description": "The name (not the handle, so immutable) of the Node issuing the report. This will typically be the scada node itself.",
      "required": true
    },
    "TriggerId": {
      "type": "string",
      "format": "UuidCanonicalTextual",
      "title": "TriggerId",
      "description": "Reference uuid for the triggering event that started the cascade of side-effect actions, events and transitions captured in this report",
      "required": true
    },
    "AtomicList": {
      "type": "array",
      "items": {
        "type": "fsm.atomic.report.000"
      },
      "description": "The list of cascading events, transitions and actions triggered by a single high-level event in a hierarchical finite state machine.",
      "required": true
    },
    "TypeName": {
      "type": "string",
      "value": "fsm.full.report",
      "title": "The type name"
    },
    "Version": {
      "type": "string",
      "title": "The type version",
      "default": "000",
      "required": true
    }
  },
  "formats": {
    "UuidCanonicalTextual": {
      "type": "string",
      "description": "A string of hex words separated by hyphens of length 8-4-4-4-12.",
      "example": "652ba6b0-c3bf-4f06-8a80-6b9832d60a25"
    },
    "SpaceheatName": {
      "type": "string",
      "description": "Lowercase words separated by periods, where the word characters can be alphanumeric or a hyphen and the first word starts with an alphabet character.",
      "example": "store-hot-pipe"
    }
  }
}
</FileContents>
      <AlwaysOverwrite>false</AlwaysOverwrite>
      <SkipClean>false</SkipClean>
    </FileSetFile>
    <FileSetFile>
      <FileSetFileId>00000000-0000-0000-0000-000000000000</FileSetFileId>
      <FileSetId>00000000-0000-0000-0000-000000000000</FileSetId>
      <RelativePath>../../../../../docs/asls/json/batched-readings.json</RelativePath>
      <FileContents>{
  "gtr_asl": "001",
  "type_name": "batched.readings",
  "version": "000",
  "owner": "gridworks@gridworks-consulting.com",
  "description": "Batched Readings. A collection of telemetry readings sent up in periodic reports from a SCADA to an AtomicTNode. These are organized into data channels (a triple of TelemetryName, AboutNode, and CapturedByNode).",
  "properties": {
    "FromGNodeAlias": {
      "type": "string",
      "format": "LeftRightDot",
      "title": "",
      "required": true
    },
    "FromGNodeInstanceId": {
      "type": "string",
      "format": "UuidCanonicalTextual",
      "title": "",
      "required": true
    },
    "AboutGNodeAlias": {
      "type": "string",
      "format": "LeftRightDot",
      "title": "",
      "required": true
    },
    "SlotStartUnixS": {
      "type": "integer",
      "format": "ReasonableUnixTimeS",
      "title": "",
      "required": true
    },
    "BatchedTransmissionPeriodS": {
      "type": "integer",
      "format": "PositiveInteger",
      "title": "",
      "required": true
    },
    "DataChannelList": {
      "type": "array",
      "items": {
        "type": "data.channel.gt.000"
      },
      "description": "The list of data channels for which there is data getting reported in this batched reading. It is a subset of all the data channels for the SCADA - may not be all of them.",
      "required": true
    },
    "ChannelReadingList": {
      "type": "array",
      "items": {
        "type": "channel.readings.000"
      },
      "required": true
    },
    "FsmActionList": {
      "type": "array",
      "items": {
        "type": "fsm.atomic.report.000"
      },
      "description": "FSM Actions (that is, side-effects of state machine transitions with real-world changes to the underlying TerminalAsset).",
      "required": true
    },
    "FsmReportList": {
      "type": "array",
      "items": {
        "type": "fsm.full.report.000"
      },
      "description": "FSM Reports are the cacading events, actions and transitions caused by a single high-level event. There is duplication with the action list.",
      "required": true
    },
    "Id": {
      "type": "string",
      "format": "UuidCanonicalTextual",
      "title": "Batched Reading Id",
      "description": "Globally Unique identifier for a BatchedReadings message",
      "required": true
    },
    "TypeName": {
      "type": "string",
      "value": "batched.readings",
      "title": "The type name"
    },
    "Version": {
      "type": "string",
      "title": "The type version",
      "default": "000",
      "required": true
    }
  },
  "axioms": {
    "Axiom1": {
      "title": "Each of the fsm.atomic.reports in this list must be actions (i.e. IsAction = true).",
      "description": ""
    },
    "Axiom2": {
      "title": "DataChannel Consistency",
      "description": "There is a bijection between the DataChannelLists and ChannelReadingLists via the ChannelId."
    },
    "Axiom3": {
      "title": "Time Consistency",
      "description": "For every ScadaReadTimeUnixMs let read_s = read_ms / 1000. Let start_s be SlotStartUnixS. Then read_s &gt;= start_s and start_s + BatchedTransmissionPeriodS + 1 + start_s &gt; read_s."
    }
  },
  "formats": {
    "ReasonableUnixTimeS": {
      "type": "string",
      "description": "Integer reflecting unix time seconds between 1970 and 3000",
      "example": ""
    },
    "UuidCanonicalTextual": {
      "type": "string",
      "description": "A string of hex words separated by hyphens of length 8-4-4-4-12.",
      "example": "652ba6b0-c3bf-4f06-8a80-6b9832d60a25"
    },
    "PositiveInteger": {
      "type": "string",
      "description": "Must be positive when interpreted as an integer. Interpretation as an integer follows the pydantic rules for this - which will round down rational numbers. So 1.7 will be interpreted as 1 and is also fine, while 0.5 is interpreted as 0 and will raise an exception.",
      "example": ""
    },
    "LeftRightDot": {
      "type": "string",
      "description": "Lowercase alphanumeric words separated by periods, with the most significant word (on the left) starting with an alphabet character.",
      "example": "dw1.isone.me.freedom.apple"
    }
  }
}
</FileContents>
      <AlwaysOverwrite>false</AlwaysOverwrite>
      <SkipClean>false</SkipClean>
    </FileSetFile>
    <FileSetFile>
      <FileSetFileId>00000000-0000-0000-0000-000000000000</FileSetFileId>
      <FileSetId>00000000-0000-0000-0000-000000000000</FileSetId>
      <RelativePath>../../../../../docs/asls/json/gt-sh-multipurpose-telemetry-status.json</RelativePath>
      <FileContents>{
  "gtr_asl": "001",
  "type_name": "gt.sh.multipurpose.telemetry.status",
  "version": "100",
  "owner": "gridworks@gridworks-consulting.com",
  "description": "Data read from a MultipurposeSensor run by a Spaceheat SCADA. A list of readings about a specific SpaceheatNode made by a MultipurposeSensor node, for a Spaceheat SCADA. Designed as part of a status message sent from the SCADA to its AtomicTNode typically once every 5 minutes. The nth element of each of its two lists refer to the same reading (i.e. what the value is, when it was read).",
  "url": "https://gridworks-protocol.readthedocs.io/en/latest/multipurpose-sensor.html",
  "properties": {
    "AboutNodeAlias": {
      "type": "string",
      "format": "LeftRightDot",
      "title": "AboutNodeAlias",
      "description": "The SpaceheatNode representing the physical object that the sensor reading is collecting data about. For example, a multipurpose temp sensor that reads 12 temperatures would have data for 12 different AboutNodeAliases, including say `a.tank1.temp1` for a temp sensor at the top of a water tank.",
      "required": true
    },
    "SensorNodeAlias": {
      "type": "string",
      "description": "The alias of the SpaceheatNode representing the telemetry device",
      "required": true
    },
    "TelemetryName": {
      "type": "string",
      "format": "spaceheat.telemetry.name",
      "title": "TelemetryName",
      "description": "The TelemetryName of the readings. This is used to interpet the meaning of the reading values. For example, WaterTempCTimes1000 means the reading is measuring the a reading of 37 deg C.",
      "required": true
    },
    "ValueList": {
      "type": "array",
      "items": {
        "type": "integer"
      },
      "description": "The values of the readings.",
      "required": true
    },
    "ReadTimeUnixMsList": {
      "type": "array",
      "items": {
        "type": "integer"
      },
      "format": "ReasonableUnixTimeMs",
      "title": "List of Read Times",
      "description": "The times that the MultipurposeSensor took the readings, in unix milliseconds",
      "required": true
    },
    "TypeName": {
      "type": "string",
      "value": "gt.sh.multipurpose.telemetry.status",
      "title": "The type name"
    },
    "Version": {
      "type": "string",
      "title": "The type version",
      "default": "100",
      "required": true
    }
  },
  "axioms": {
    "Axiom1": {
      "title": "ListLengthConsistency",
      "description": "ValueList and ReadTimeUnixMsList must have the same length."
    }
  },
  "formats": {
    "LeftRightDot": {
      "type": "string",
      "description": "Lowercase alphanumeric words separated by periods, with the most significant word (on the left) starting with an alphabet character.",
      "example": "dw1.isone.me.freedom.apple"
    },
    "ReasonableUnixTimeMs": {
      "type": "string",
      "description": "An integer reflecting unix time in MILLISECONDS between midnight Jan 1 2000 and midnight Jan 1 3000 UTC",
      "example": "1702327940710"
    }
  }
}
</FileContents>
      <AlwaysOverwrite>false</AlwaysOverwrite>
      <SkipClean>false</SkipClean>
    </FileSetFile>
    <FileSetFile>
      <FileSetFileId>00000000-0000-0000-0000-000000000000</FileSetFileId>
      <FileSetId>00000000-0000-0000-0000-000000000000</FileSetId>
      <RelativePath>../../../../../docs/asls/json/gt-sh-status.json</RelativePath>
      <FileContents>{
  "gtr_asl": "001",
  "type_name": "gt.sh.status",
  "version": "110",
  "owner": "gridworks@gridworks-consulting.com",
  "description": ". Status message sent by a Spaceheat SCADA every 5 minutes",
  "properties": {
    "FromGNodeAlias": {
      "type": "string",
      "format": "LeftRightDot",
      "title": "",
      "required": true
    },
    "FromGNodeId": {
      "type": "string",
      "format": "UuidCanonicalTextual",
      "title": "",
      "required": true
    },
    "AboutGNodeAlias": {
      "type": "string",
      "format": "LeftRightDot",
      "title": "",
      "required": true
    },
    "SlotStartUnixS": {
      "type": "integer",
      "format": "ReasonableUnixTimeS",
      "title": "",
      "required": true
    },
    "ReportingPeriodS": {
      "type": "integer",
      "required": true
    },
    "SimpleTelemetryList": {
      "type": "array",
      "items": {
        "type": "gt.sh.simple.telemetry.status.100"
      },
      "required": true
    },
    "MultipurposeTelemetryList": {
      "type": "array",
      "items": {
        "type": "gt.sh.multipurpose.telemetry.status.100"
      },
      "required": true
    },
    "BooleanactuatorCmdList": {
      "type": "array",
      "items": {
        "type": "gt.sh.booleanactuator.cmd.status.100"
      },
      "required": true
    },
    "StatusUid": {
      "type": "string",
      "format": "UuidCanonicalTextual",
      "title": "",
      "required": true
    },
    "TypeName": {
      "type": "string",
      "value": "gt.sh.status",
      "title": "The type name"
    },
    "Version": {
      "type": "string",
      "title": "The type version",
      "default": "110",
      "required": true
    }
  },
  "formats": {
    "ReasonableUnixTimeS": {
      "type": "string",
      "description": "Integer reflecting unix time seconds between 1970 and 3000",
      "example": ""
    },
    "UuidCanonicalTextual": {
      "type": "string",
      "description": "A string of hex words separated by hyphens of length 8-4-4-4-12.",
      "example": "652ba6b0-c3bf-4f06-8a80-6b9832d60a25"
    },
    "LeftRightDot": {
      "type": "string",
      "description": "Lowercase alphanumeric words separated by periods, with the most significant word (on the left) starting with an alphabet character.",
      "example": "dw1.isone.me.freedom.apple"
    }
  }
}
</FileContents>
      <AlwaysOverwrite>false</AlwaysOverwrite>
      <SkipClean>false</SkipClean>
    </FileSetFile>
    <FileSetFile>
      <FileSetFileId>00000000-0000-0000-0000-000000000000</FileSetFileId>
      <FileSetId>00000000-0000-0000-0000-000000000000</FileSetId>
      <RelativePath>../../../../../docs/asls/json/fsm-atomic-report.json</RelativePath>
      <FileContents>{
  "gtr_asl": "001",
  "type_name": "fsm.atomic.report",
  "version": "000",
  "owner": "gridworks@gridworks-consulting.com",
  "description": ". Reports of single Fsm Actions and Transitions. The actions is any side-effect, which is the way the StateMachine is supposed to cause things happen to the outside world (This could include, for example, actuating a relay.) Transitions are intended to be captured by changing the handle of the Spaceheat Node whose actor maintains that finite state machine.",
  "url": "https://gridworks-protocol.readthedocs.io/en/latest/finite-state-machines.html",
  "properties": {
    "FromHandle": {
      "type": "string",
      "format": "SpaceheatName",
      "title": "From Handle",
      "description": "The Name (as opposed to the handle) of the Spaceheat Node actor issuing the Finite State Machine report. The actor is meant to realize and be the authority on the FSM in question. Its handle reflects the state it is in.",
      "required": true
    },
    "AboutFsm": {
      "type": "string",
      "format": "sh.fsm.name",
      "title": "About Fsm",
      "description": "The finite state machine this message is about.",
      "required": true
    },
    "ReportType": {
      "type": "string",
      "format": "fsm.report.type",
      "title": "Report Type",
      "description": "Is this reporting an event, an action, or some other thing related to a finite state machine?",
      "required": true
    },
    "ActionType": {
      "type": "string",
      "format": "sh.fsm.action.type",
      "title": "Action Type",
      "description": "The FiniteState Machine Action taken",
      "required": false
    },
    "Action": {
      "type": "integer",
      "description": "Will typically be a number, usually an integer. For example, if ActionType is RelayPinSet, then RelayPinSet.DeEnergized = 0 and RelayPinSet.Energized = 1.",
      "required": false
    },
    "EventType": {
      "type": "string",
      "format": "sh.fsm.event.type",
      "title": "Event Type",
      "required": false
    },
    "Event": {
      "type": "string",
      "required": false
    },
    "FromState": {
      "type": "string",
      "description": "The state of the FSM prior to triggering event.",
      "required": false
    },
    "ToState": {
      "type": "string",
      "description": "The state of the FSM after the triggering event.",
      "required": false
    },
    "UnixTimeMs": {
      "type": "integer",
      "format": "ReasonableUnixTimeMs",
      "title": "Unix Time in Milliseconds",
      "required": true
    },
    "TriggerId": {
      "type": "string",
      "format": "UuidCanonicalTextual",
      "title": "TriggerId",
      "description": "Reference uuid for the triggering event that started a cascade of transitions, events and side-effect actions - of which this report is one.",
      "required": true
    },
    "TypeName": {
      "type": "string",
      "value": "fsm.atomic.report",
      "title": "The type name"
    },
    "Version": {
      "type": "string",
      "title": "The type version",
      "default": "000",
      "required": true
    }
  },
  "axioms": {
    "Axiom1": {
      "title": "Action and ActionType exist iff  ReportType is Action",
      "description": "The Optional Attributes ActionType and Action exist if and only if IsAction is true."
    },
    "Axiom2": {
      "title": "If Action exists, then it belongs to the un-versioned enum selected in the ActionType",
      "description": ""
    },
    "Axiom3": {
      "title": "EventType, Event, FromState, ToState exist iff ReportType is Event",
      "description": ""
    }
  },
  "formats": {
    "UuidCanonicalTextual": {
      "type": "string",
      "description": "A string of hex words separated by hyphens of length 8-4-4-4-12.",
      "example": "652ba6b0-c3bf-4f06-8a80-6b9832d60a25"
    },
    "SpaceheatName": {
      "type": "string",
      "description": "Lowercase words separated by periods, where the word characters can be alphanumeric or a hyphen and the first word starts with an alphabet character.",
      "example": "store-hot-pipe"
    },
    "ReasonableUnixTimeMs": {
      "type": "string",
      "description": "An integer reflecting unix time in MILLISECONDS between midnight Jan 1 2000 and midnight Jan 1 3000 UTC",
      "example": "1702327940710"
    }
  }
}
</FileContents>
      <AlwaysOverwrite>false</AlwaysOverwrite>
      <SkipClean>false</SkipClean>
    </FileSetFile>
  </FileSetFiles>
</FileSet>